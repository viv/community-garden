{"version":3,"file":"useForm-BF5RBW5i.js","sources":["../../src/hooks/useForm.ts"],"sourcesContent":["import { useState, useCallback, ChangeEvent, FormEvent } from 'react'\nimport { z, ZodSchema } from 'zod'\n\nexport interface UseFormOptions<T> {\n  initialValues: T\n  validationSchema?: ZodSchema<T>\n  onSubmit: (values: T) => void | Promise<void>\n  validate?: (values: T) => Record<string, string>\n}\n\nexport function useForm<T extends Record<string, any>>({\n  initialValues,\n  validationSchema,\n  onSubmit,\n  validate\n}: UseFormOptions<T>) {\n  const [values, setValues] = useState<T>(initialValues)\n  const [errors, setErrors] = useState<Record<string, string>>({})\n  const [touched, setTouched] = useState<Record<string, boolean>>({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [isValid, setIsValid] = useState(false)\n\n  // Update field value\n  const setValue = useCallback((name: keyof T, value: any) => {\n    setValues(prev => ({ ...prev, [name]: value }))\n    \n    // Clear error when field is updated\n    if (errors[name as string]) {\n      setErrors(prev => ({ ...prev, [name]: undefined }))\n    }\n  }, [errors])\n\n  // Handle input change\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value, type } = event.target\n    \n    let finalValue: any = value\n    \n    // Handle different input types\n    if (type === 'checkbox') {\n      finalValue = (event.target as HTMLInputElement).checked\n    } else if (type === 'number') {\n      finalValue = value === '' ? '' : Number(value)\n    } else if (type === 'file') {\n      finalValue = (event.target as HTMLInputElement).files\n    }\n\n    setValue(name as keyof T, finalValue)\n  }, [setValue])\n\n  // Handle field blur\n  const handleBlur = useCallback((event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name } = event.target\n    setTouched(prev => ({ ...prev, [name]: true }))\n    \n    // Validate field on blur\n    validateField(name as keyof T)\n  }, [])\n\n  // Validate single field\n  const validateField = useCallback((name: keyof T) => {\n    const fieldErrors: Record<string, string> = {}\n\n    // Zod validation\n    if (validationSchema) {\n      try {\n        validationSchema.parse(values)\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          error.errors.forEach(err => {\n            if (err.path.includes(name as string)) {\n              fieldErrors[name as string] = err.message\n            }\n          })\n        }\n      }\n    }\n\n    // Custom validation\n    if (validate) {\n      const customErrors = validate(values)\n      if (customErrors[name as string]) {\n        fieldErrors[name as string] = customErrors[name as string]\n      }\n    }\n\n    setErrors(prev => ({ ...prev, ...fieldErrors }))\n    return Object.keys(fieldErrors).length === 0\n  }, [values, validationSchema, validate])\n\n  // Validate all fields\n  const validateForm = useCallback(() => {\n    const formErrors: Record<string, string> = {}\n\n    // Zod validation\n    if (validationSchema) {\n      try {\n        validationSchema.parse(values)\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          error.errors.forEach(err => {\n            const field = err.path.join('.')\n            formErrors[field] = err.message\n          })\n        }\n      }\n    }\n\n    // Custom validation\n    if (validate) {\n      const customErrors = validate(values)\n      Object.assign(formErrors, customErrors)\n    }\n\n    setErrors(formErrors)\n    const valid = Object.keys(formErrors).length === 0\n    setIsValid(valid)\n    return valid\n  }, [values, validationSchema, validate])\n\n  // Handle form submission\n  const handleSubmit = useCallback(async (event: FormEvent) => {\n    event.preventDefault()\n    \n    // Mark all fields as touched\n    const allTouched = Object.keys(values).reduce(\n      (acc, key) => ({ ...acc, [key]: true }),\n      {}\n    )\n    setTouched(allTouched)\n\n    // Validate form\n    if (!validateForm()) {\n      return\n    }\n\n    setIsSubmitting(true)\n    \n    try {\n      await onSubmit(values)\n    } catch (error) {\n      console.error('Form submission error:', error)\n    } finally {\n      setIsSubmitting(false)\n    }\n  }, [values, validateForm, onSubmit])\n\n  // Reset form\n  const reset = useCallback((newValues?: Partial<T>) => {\n    setValues(newValues ? { ...initialValues, ...newValues } : initialValues)\n    setErrors({})\n    setTouched({})\n    setIsSubmitting(false)\n    setIsValid(false)\n  }, [initialValues])\n\n  // Get field props for easy spreading\n  const getFieldProps = useCallback((name: keyof T) => ({\n    name: name as string,\n    value: values[name] || '',\n    onChange: handleChange,\n    onBlur: handleBlur,\n    'aria-invalid': touched[name as string] && errors[name as string] ? 'true' : 'false',\n    'aria-describedby': errors[name as string] ? `${name as string}-error` : undefined\n  }), [values, handleChange, handleBlur, touched, errors])\n\n  // Get error message for field\n  const getFieldError = useCallback((name: keyof T) => {\n    return touched[name as string] ? errors[name as string] : undefined\n  }, [touched, errors])\n\n  // Check if field has error\n  const hasFieldError = useCallback((name: keyof T) => {\n    return touched[name as string] && !!errors[name as string]\n  }, [touched, errors])\n\n  return {\n    values,\n    errors,\n    touched,\n    isSubmitting,\n    isValid,\n    setValue,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    validateField,\n    validateForm,\n    reset,\n    getFieldProps,\n    getFieldError,\n    hasFieldError\n  }\n}"],"names":["useForm","initialValues","validationSchema","onSubmit","validate","values","setValues","useState","errors","setErrors","touched","setTouched","isSubmitting","setIsSubmitting","isValid","setIsValid","setValue","useCallback","name","value","prev","handleChange","event","type","finalValue","handleBlur","validateField","fieldErrors","error","z.ZodError","err","customErrors","validateForm","formErrors","field","valid","handleSubmit","allTouched","acc","key","reset","newValues","getFieldProps","getFieldError","hasFieldError"],"mappings":"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"}